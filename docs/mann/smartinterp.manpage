<manpage smartinterp(n) "Smart Tcl Interpreter" quill(n)>

<section SYNOPSIS>

<example>
package require quill <version>
namespace import ::quill::*
</example>

<itemlist>

<section DESCRIPTION>

smartinterp(n) is the object type which wraps standard Tcl
<b>interp</b>'s and provides additional ways to define commands
within them.<p>

<section COMMANDS>

smartinterp(n) defines the following commands:<p>

<deflist commands>

<defitem smartinterp {smartinterp <i>obj</i> ?<i>options</i>?}>

Creates a new smartinterp(n) object called <i>obj</i>.  Each smartinterp(n)
object wraps a single Tcl interpreter.
If <i>obj</i> is <b>%AUTO%</b>, smartinterp(n) will choose an object name
automatically.  Either way, the new object's name is returned.<p>

smartinterp(n) objects may be created with the following options:<p>

<deflist options>

<defopt {-commands <i>set</i>}>

The <i>set</i> is <b>all</b>, <b>safe</b>, or <b>none</b>: all
standard commands (the default), only safe commands, or no commands at
all.  This option is read-only after the object is created.<p>

</deflist options>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of smartinterp(n) has the following subcommands.<p>

<deflist instance>

<defitem cget {<i>obj</i> cget <i>option</i>}>

Returns the value of the named option.<p>

<defitem configure {<i>obj</i> configure ?<i>options...</i>?}>

Sets the value of one or more options.<p>

<defitem eval {<i>obj</i> eval <i>args...</i>}>

Evaluates its <i>args</i> in the smartinterp(n)'s slave interpreter.  The
semantics are identical to the <b>eval</b> subcommand of a standard
Tcl interpreter.<p>

<defitem alias {<i>obj</i> alias <i>srcCmd</i> ?<i>targetCmd</i>? ?<i>args</i>?}>

Aliases the <i>targetCmd</i> (with any specified <i>args</i>) into the
smartinterp(n) as <i>srcCmd</i>.  The arguments and semantics are as for
the <b>alias</b> subcommand of a standard Tcl slave interpreter.<p>

<defitem proc {<i>obj</i> proc <i>name arglist body</i>}>

Defines a proc in the context of the interpreter.  Calling this
command is equivalent to passing a proc definition to
<xref #eval>.<p>

<defitem clone {<i>obj</i> clone <i>srcProc</i> <i>targetProc</i>}>

Retrieves the definition of the <i>targetProc</i> in the caller's
context, and defines it in the slave interpreter under the name
<i>srcProc</i>.  If <i>srcProc</i> contains namespace information,
the relevant namespaces must already exist in the slave interpreter.<p>

<defitem ensemble {<i>obj</i> ensemble <i>name</i>}>

Defines an ensemble to which smart aliases (and sub-ensembles) can be
attached.  If <i>name</i> is a list, the first (n-1) elements
must be the name of a previously defined <xref #ensemble>.<p>

<defitem smartalias {<i>obj</i> smartalias <i>name syntax minArgs maxArgs prefix</i>}>

Defines a "smart" alias, an alias with improved standard error
messages.  The <i>name</i> is the name of the command within the
slave interpreter; if <i>name</i> is a list, the first (n-1) elements
must be the name of an <xref #ensemble>.<p>

The <i>syntax</i> should be the command's syntax, shown in usual Tcl
style, excluding the <i>name</i>.  The <i>minArgs</i> is the minimum
acceptable number of arguments, and <i>maxArgs</i> is the maximum
acceptable number of arguments, or "-" if there is no maximum.<p>

The <i>prefix</i> is the command prefix of which the alias is an
alias.<p>

If a smart alias is used, then "wrong # args" error messages will
reflect the alias name rather than the name of the command to which it
is aliased.  Further, calling an ensemble alias without a subcommand
or with an incorrect subcommand will also result in appropriate
error messages.<p>

</deflist instance>

<section AUTHOR>

Will Duquette.<p>

</manpage>
