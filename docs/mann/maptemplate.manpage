<manpage maptemplate(n) "String Map Templates" quill(n)>

<section SYNOPSIS>

<example>
package require quill 1.0
namespace import ::quill::*
</example>

<itemlist>

<section DESCRIPTION>

maptemplate(n) contains commands for creating text templates
based on Tcl's <code string map> command.  These commands are similar
to those defined in <xref template(n)>, but because they do not
use Tcl interpolation syntax they are much better suited to the
generation of Tcl code.<p>

<subsection "Defining Templates">

The <xref #maptemplate> command define a template.  A template is a
like a Tcl proc, but its body is a template string into which
values can be substituted.  Replacement arguments are specified
by the arguments to the template, and are placed in the body string
with a "%" prefix.  For example<p>

<example>
% maptemplate greeting {name} {Hello, %name!}
::greeting
% greeting World
Hello, World!
%
</example>

The template shown is equivalent to this Tcl proc:<p>

<example>
proc greeting {name} {
    return [mapsubst {Hello, %name}]
}
</example>

<subsection "Initialization Bodies">

Sometimes a <xref #maptemplate> requires
some initialization of variables or other processing that can't
conveniently be done in the template string itself.  Consequently,
<xref #maptemplate> allows the caller to define an "initialization" body.
This is just a block of Tcl code that's called just before the
template is expanded.  It usually defines variables that are then
substituted into the template.<p>

Suppose, for example, a template argument should be converted to 
upper case.  Compare<p>

<example>
maptemplate greeting {name} {Hello, [string toupper %name]}
</example>

with<p>

<example>
maptemplate greeting {name} {
  set name [string toupper $name]
} {Hello, %name!}
</example>

The second separates the data processing from the template string, and so
is clearer.<p>

<subsection "Backslash Substitution">

Templates for Tcl code will often contain backslashes as a line
continuation character.  Tcl's parser does the line continuation
processing when the template is defined, meaning that the continued
lines will appear in the output all on one single line.  For example,
the template string<p>

<example>
list \
   one \
   two \
   thre
</example>

will product the output

<example>list     one    two    three</example>

This can be avoided by doubling the backslashes in the input:<p>

<example>
list \\
    one \\
    two \\
    three
</example>

<subsection "Two Caveats">

First, only <b local scalar> variables are available
for interpolation.  Arrays and globals are not.  Second, when generating
Tcl code, it is up to the caller to make sure that interpolated lists
and other values containing white space are quoted properly in the 
template.<p>

<subsection "Templates are Outdented">

It's normal when using templates to indent the template string,
but the output code block should usually be at the left margin.
Consequently, <xref #mapsubst> always passes the template through the
<xref stringutils(n)#outdent> command.<p>

<section COMMANDS>

maptemplate(n) defines the following commands:<p>

<deflist commands>

<defitem maptemplate {maptemplate <i name arglist> ?<i initbody>? <i template>}>

Defines a new command with the specified <i>name</i> and
<i>arglist</i>.  The <i>template</i> argument is a string
which may contain "%<i var>" conversions.  When the new command 
is called, the <i>template</i> is passed to <xref #mapsubst>, and
the result is returned.<p>

If the <i>initbody</i> is specified, it contains Tcl code to
be executed before the <i>template</i> is expanded.         
Normally, the only variables which will be in scope when the
template string is expanded are the template command's
arguments; the <i>initbody</i> is used to initialize
other local scalar variables for inclusion in the <i>template</i>.<p>


<defitem mapsubst {mapsubst <i template>}>

The <xref #mapsubst> command interpolates local scalar variable values
into the <i template> string.  It retrieves the names and values
of all local variables in its caller's context and builds a 
<code string map> dictionary, first prefixing the variable names
with "%".  Then it calls <code string map> on the template using
the dictionary, replacing "%<i var>" with the value of variable
<i var>.<p>

Double backslashes in the <i template> are replaced with single 
backslashes.  See <xref "#Backslash Substitution">.<p>

Note that only <b local> (procedure arguments and local variables) 
<b scalar> variables are substituted.
Array variables could be supported, if necessary.<p>

</deflist commands>


<section AUTHOR>

Will Duquette<p>

<section "SEE ALSO">

<xref quill(n)>.<p>

</manpage>