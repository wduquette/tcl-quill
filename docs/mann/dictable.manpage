<manpage dictable(n) "dictable formatting" quill(n)>

<section SYNOPSIS>

<example>
package require quill <version>
namespace import ::quill::*
</example>

<itemlist>

<section DESCRIPTION>

dictable(n) is a module for formatting plain text tables from 
lists of dictionaries.  The primary constraint is that the dictionaries
must all have the same keys (or the caller must limit the output to 
those keys the dictionaries have in common).  It is intended primarily
to simplify the creation of console output.<p>

<section COMMANDS>

dictable(n) defines the following commands:<p>

<deflist commands>

<defitem "dictable filter" {dictable filter <i table key pattern> ?<i key pattern...>?}>

Returns a table containing all rows from <i table> for which the given 
patterns match the given keys.  The patterns are standard 
<tt string match> patterns.<p>

<defitem "dictable format" {dictable format <i table> ?<i options...>?}>

Given a "table", a list of dictionaries, this command formats the
table as a multi-column table.  Each dictionary is output on its
own row, with one column for each dictionary key.  There are no 
headers, and all keys are included; the order of the columns is 
the order of the keys in the first item in the table.<p>

The following options may be used to customize the output:<p>

<deflist options>
<defopt {-leader <i text>}>

Specifies a leader string to put at the beginning of each line.  
To indent the table four spaces, use a leader of four spaces.  Defaults
to the empty string.<p>

<defopt {-sep <i text>}>

Specifies the separator to go between columns.  Defaults to one space
character.<p>

<defopt {-columns <i list>}>

Specifies a list of dictionary keys.  The command will include just these
keys in the output, in order from left to right.<p>

<defopt {-showheaders}>

If this option is given, the table will include column headers.<p>

<defopt {-skipsame <i list>}>

If <i list> is given, it should be a list of column names.  If a named
column has the same value in successive rows, it will be left blank in
all rows but the first.  This can result in more readable tables, 
especially when used for the first few columns.<p>

<defopt {-headers <i dict>}>

By default, the column headers are simply the names of the column keys.
If given, the value of <b -headers> should be a dictionary of header label
strings by column key.<p>

</deflist options>

<defitem "dictable puts" {dictable puts <i table> ?<i options...>?}>

Formats the <i table> and writes it to <b stdout>.  The options are
as for <xref "#dictable format">.<p>

<defitem "dictable sort" {dictable sort <i table> ?<i colspecs>?}>

By default, this command sorts the rows in the table in increasing order
using a case-sensitive string comparison on each column, taking the column
order from the first row in the table.  The sorting can be customized
by specifying a list of column specifications.  Each column spec is a 
list that begins with the column name; the columns are sorted in the 
order of the list.  Each column spec may include the following options:<p>

<deflist options>

<defopt {-decreasing}>
The column will be sorted in decreasing order, rather than increasing.<p>

<defopt {-nocase}>
String comparisons will be case insensitive.<p>

<defopt {-numeric}>
Values to be compared will be converted to numeric doubles before comparing.<p>

</deflist options>

For example, 

<example>
set sorted [dictable sort $table {last first {age -numeric}}]
</example>

</deflist commands>


<section AUTHOR>

Will Duquette<p>

<section "SEE ALSO">

<xref quill(n)>.

</manpage>
