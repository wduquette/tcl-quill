# -*-Tcl-*-
#-------------------------------------------------------------------------
# TITLE:
#    control.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    quill(n): Test cases for control.tcl

#-------------------------------------------------------------------------
# Load the tcltest package

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.3
    eval ::tcltest::configure $argv
}

namespace import ::tcltest::test

#-------------------------------------------------------------------------
# Load the package to be tested

# or source ../../lib/quill/pkgModules.tcl
package prefer latest
package require quill
namespace import ::quill::*


#-------------------------------------------------------------------------
# assert

test assert-1.1 {assert succeeds} -body {
    assert {1 + 1 == 2}
    set result OK
} -result {OK}

test assert-1.2 {assert fails} -body {
    codecatch {
        assert {1 + 1 == 3}
    }
} -result {ASSERT {Assertion failed: 1 + 1 == 3}}

#-------------------------------------------------------------------------
# codecatch

test codecatch-1.1 {script succeeds} -body {
    codecatch {
        set a "No error"
    }
} -result {ok {No error}}

test codecatch-1.2 {script fails} -body {
    codecatch {
        throw FAILURE "Simulated error"
    }
} -result {FAILURE {Simulated error}}

#-------------------------------------------------------------------------
# foroption

test foroption-1.1 {no args} -body {
    set argv ""
    set test 0
    foroption opt argv {
        -test { set test 1 }
    }

    list $test $argv
} -result {0 {}}

test foroption-1.2 {no options} -body {
    set argv {this that}
    set test 0
    foroption opt argv {
        -test { set test 1 }
    }

    list $test $argv
} -result {0 {this that}}

test foroption-1.3 {one option} -body {
    set argv {-test this that}
    set test 0
    foroption opt argv {
        -test { set test 1 }
    }

    list $test $argv
} -result {1 {this that}}

test foroption-1.3 {two options with lshift} -body {
    set argv {-test -num 5 this that}
    set test 0
    set num 0
    foroption opt argv {
        -test { set test 1            }
        -num  { set num [lshift argv] }
    }

    list $test $num $argv
} -result {1 5 {this that}}

test foroption-1.4 {-all, successfully} -body {
    set argv {-test -num 5}
    set test 0
    set num 0
    foroption opt argv -all {
        -test { set test 1            }
        -num  { set num [lshift argv] }
    }

    list $test $num $argv
} -result {1 5 {}}

test foroption-2.1 {unknown option} -body {
    set argv {-test -num 5 this that}
    set test 0
    set num 0

    codecatch {
        foroption opt argv {
            -test { set test 1 }
        }
    }
} -result {INVALID {Unknown option: "-num"}}

test foroption-2.2 {-all, unsuccessfully} -body {
    set argv {-test this that}
    set test 0
    set num 0

    codecatch {
        foroption opt argv -all {
            -test { set test 1 }
        }
    }
} -result {INVALID {Unknown option: "this"}}

#-------------------------------------------------------------------------
# precond

test precond-1.1 {precondition is met} -body {
    codecatch {
        precond {1 + 1 == 2} "Math works"
    }
} -result {ok {}}

test precond-1.2 {script fails} -body {
    codecatch {
        precond {1 + 1 == 3} "Math fails"
    }
} -result {ASSERT {Math fails}}

#-------------------------------------------------------------------------
# require

test require-1.1 {requirement is met} -body {
    codecatch {
        require {1 + 1 == 2} "Math works"
    }
} -result {ok {}}

test require-1.2 {requirement is not met} -body {
    codecatch {
        require {1 + 1 == 3} "Math fails"
    }
} -result {INVALID {Math fails}}

test require-1.3 {can specify error code} -body {
    codecatch {
        require {1 + 1 == 3} "Math fails" SYNTAX
    }
} -result {SYNTAX {Math fails}}

#---------------------------------------------------------------------
# Clean up and finish

::tcltest::cleanupTests



