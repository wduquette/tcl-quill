# -*-Tcl-*-
#-------------------------------------------------------------------------
# TITLE:
#    misc.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_quill(n): Test cases for misc.tcl

#-------------------------------------------------------------------------
# Load the tcltest package

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.3
    eval ::tcltest::configure $argv
}

namespace import ::tcltest::test

#-------------------------------------------------------------------------
# Load the package to be tested

source ../../lib/app_quill/pkgModules.tcl
namespace import ::app_quill::*

#-------------------------------------------------------------------------
# Setup

source ted.tcl
ted init

#-------------------------------------------------------------------------
# checkargs

test checkargs-1.1 {too few} -body {
    codecatch {
        checkargs "quill test" 1 1 {arg} {}
    }
} -result {FATAL {Usage: quill test arg}}

test checkargs-1.2 {too many} -body {
    codecatch {
        checkargs "quill test" 1 1 {arg} {a b}
    }
} -result {FATAL {Usage: quill test arg}}

test checkargs-2.1 {just enough} -body {
    codecatch {
        checkargs "quill test" 1 3 {a1 ?a2? ?a3?} {a}
    }
} -result {ok {}}

test checkargs-2.2 {max number} -body {
    codecatch {
        checkargs "quill test" 1 3 {a1 ?a2? ?a3?} {a b c}
    }
} -result {ok {}}

test checkargs-2.3 {lots} -body {
    codecatch {
        checkargs "quill test" 1 - {a1 ?args...?} {a b c d e f g h i j}
    }
} -result {ok {}}

#-------------------------------------------------------------------------
# gentree

test gentree-1.1 {generate file without subdirs} -setup {
    ted makeproj
} -body {
    gentree myfile1.1.txt {Some Text}
    readfile [ted root myfile1.1.txt]
} -cleanup {
    ted cleanup
} -result {Some Text}

test gentree-1.2 {generate file with subdirs} -setup {
    ted makeproj
} -body {
    gentree mydir/myfile1.2.txt {More Text}
    readfile [ted root mydir myfile1.2.txt]
} -cleanup {
    ted cleanup
} -result {More Text}

test gentree-1.3 {multiple files} -setup {
    ted makeproj
} -body {
    gentree myfile1.3a.txt       {A Contents} \
            mydir/myfile1.3b.txt {B Contents}

    set a [readfile [ted root myfile1.3a.txt]]
    set b [readfile [ted root mydir myfile1.3b.txt]]
    list $a $b
} -cleanup {
    ted cleanup
} -result {{A Contents} {B Contents}}

#-------------------------------------------------------------------------
# prepare

test prepare-1.1 {trims string} -body {
    set parm "   Some Input   "
    prepare parm
} -result {Some Input}

test prepare-1.2 {-tighten} -body {
    set parm "  manny   moe   "
    prepare parm -tighten
} -result {manny moe}

test prepare-1.3 {-toupper} -body {
    set parm "manny"
    prepare parm -toupper
} -result {MANNY}

test prepare-1.4 {-tolower} -body {
    set parm "MANNY"
    prepare parm -tolower
} -result {manny}

test prepare-2.1 {-file fails} -body {
    set parm "file name"
    codecatch { prepare parm -file }
} -result {INVALID {Input "parm" contains illegal characters or whitespace: "file name"}}

test prepare-2.2 {-file succeeds} -body {
    set parm "file_name"
    prepare parm -file
} -result {file_name}

test prepare-3.1 {-oneof fails} -body {
    set parm "john"
    codecatch { prepare parm -oneof {manny moe jack} }
} -result {INVALID {Input "parm" is not one of (manny, moe, jack): "john"}}

test prepare-3.2 {-oneof succeeds} -body {
    set parm "jack"
    prepare parm -oneof {manny moe jack}
} -result {jack}

test prepare-4.1 {-listof fails} -body {
    set parm "manny john"
    codecatch { prepare parm -listof {manny moe jack} }
} -result {INVALID {Input "parm" isn't a list of (manny, moe, jack): "manny john"}}

test prepare-4.2 {-listof succeeds} -body {
    set parm "manny jack"
    prepare parm -listof {manny moe jack}
} -result {manny jack}

test prepare-5.1 {-required fails} -body {
    set parm ""
    codecatch { prepare parm -required }
} -result {INVALID {Input "parm" requires a non-empty value.}}

test prepare-5.2 {-required succeeds} -body {
    set parm "manny"
    prepare parm -required
} -result {manny}

test prepare-6.1 {-type fails} -body {
    set parm "nonesuch"
    codecatch { prepare parm -type snit::integer }
} -result {INVALID {invalid value "nonesuch", expected integer}}

test prepare-6.2 {-type succeeds} -body {
    set parm "123"
    prepare parm -type snit::integer
} -result {123}

#-------------------------------------------------------------------------
# tagsplit

test tagsplit-1.1 {tag not found} -body {
    tagsplit dummy [outdent {
        Line 1
        Line 2
        Line 3
    }]
} -result ""

test tagsplit-1.2 {just tags} -body {
    tagsplit dummy [outdent {
        # -quill-dummy-begin
        # -quill-dummy-end
    }]
} -result {{{# -quill-dummy-begin}} {} {{# -quill-dummy-end}}}

test tagsplit-1.3 {tags and text} -body {
    tagsplit dummy [outdent {
        A
        B
        # -quill-dummy-begin
        C
        D
        # -quill-dummy-end
        E
        F
    }]
} -result {{A B {# -quill-dummy-begin}} {C D} {{# -quill-dummy-end} E F}}

#---------------------------------------------------------------------
# tagreplace

test tagreplace-1.1 {no tags found} -body {
    tagreplace dummy [outdent {
        A
        B
        C
    }] {new line}
} -result {A
B
C}

test tagreplace-1.2 {no prefix/suffix} -body {
    tagreplace dummy [outdent {
        # -quill-dummy-begin
        A
        B
        C
        # -quill-dummy-end
    }] {new line}
} -result {# -quill-dummy-begin
new line
# -quill-dummy-end}

test tagreplace-1.3 {prefix/suffix} -body {
    tagreplace dummy [outdent {
        X
        # -quill-dummy-begin
        A
        B
        C
        # -quill-dummy-end
        Y
    }] {new line}
} -result {X
# -quill-dummy-begin
new line
# -quill-dummy-end
Y}

test tagreplace-1.4 {no existing content} -body {
    tagreplace dummy [outdent {
        X
        # -quill-dummy-begin
        # -quill-dummy-end
        Y
    }] {new line}
} -result {X
# -quill-dummy-begin
new line
# -quill-dummy-end
Y}

#-------------------------------------------------------------------------
# Clean up and finish

::tcltest::cleanupTests



