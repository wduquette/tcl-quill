#-------------------------------------------------------------------------
# TITLE: 
#    elementx_testtarget.tcl
#
# AUTHOR:
#    Will Duquette
# 
# PROJECT:
#    Quill: Project build system for Tcl/TK
#
# DESCRIPTION:
#    Project Element: test target directory
#
# TODO:
#    During validation, we retrieve the file paths and their contents,
#    which derive from the element args.  We can then check whether we 
#    are overwriting anything.  If we are not, or if -force is given,
#    then the parent module can save the files.  But there may be
#    project metadata changes.  How do we avoid parsing the element 
#    parameters twice?
#
#-------------------------------------------------------------------------

::app_quill::elementx define testtarget {
    description "Test target directory"
    tree        0
    argspec     {1 1 target}
} {
This element creates a single test target directory called <target>.
It will contain two files, all_tests.test and <target>.test.
} {
    # TBD: How does metadata know the element parameters?
    typemethod metadata {} {
        # No metadata changes.
        return
    }

    # files
    typemethod files {target} {

    }
}

#-------------------------------------------------------------------------
# package Templates

::app_quill::element public package {package} 1 1 \
     ::app_quill::packageElement

# package package mainflag
#
# package - The package name
# mainflag - If true, generate a "main" procedure
# 
# Saves the package element tree.

proc ::app_quill::packageElement {package {mainflag 0}} {
    gentree \
        lib/$package/pkgIndex.tcl    [pkgIndex $package]              \
        lib/$package/pkgModules.tcl  [pkgModules $package $mainflag]  \
        test/$package/all_tests.test [allTests $package]              \
        test/$package/$package.test  [testFile $package]

    if {$mainflag} {
        gentree lib/$package/main.tcl [mainFile $package]
    } else {
        gentree lib/$package/$package.tcl [pkgFile $package]
    }
}

# pkgIndex package
#
# pkgIndex.tcl file for the $package(n) package.

maptemplate ::app_quill::pkgIndex {package} {
    set project     [project name]
    set description [project description]
    set version     [project version]
} {
    #-------------------------------------------------------------------------
    # TITLE: 
    #    pkgIndex.tcl
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): pkgIndex file
    #
    #    Generated by Quill
    #
    #-------------------------------------------------------------------------

    # -quill-ifneeded-begin DO NOT EDIT BY HAND
    package ifneeded %package %version [list source [file join $dir pkgModules.tcl]]
    # -quill-ifneeded-end
}

# pkgModules package mainflag
#
# pkgModules.tcl file for the $package(n) package.

maptemplate ::app_quill::pkgModules {package mainflag} {
    set project     [project name]
    set description [project description]
    set version     [project version]

    if {$mainflag} {
        set module main
    } else {
        set module $package
    }
} {
    #-------------------------------------------------------------------------
    # TITLE: 
    #    pkgModules.tcl
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): Package Loader
    #
    #    Generated by Quill
    #
    #-------------------------------------------------------------------------

    #-------------------------------------------------------------------------
    # Provide Package

    # -quill-provide-begin DO NOT EDIT BY HAND
    package provide %package %version
    # -quill-provide-end

    #-------------------------------------------------------------------------
    # Require Packages

    # -quill-require-begin INSERT PACKAGE REQUIRES HERE
    # -quill-require-end

    #-------------------------------------------------------------------------
    # Get the library directory

    namespace eval ::%package:: {
        variable library [file dirname [info script]]
    }

    source [file join $::%package::library %module.tcl]
}

# pkgFile package
#
# $package.tcl file for the $package(n) package.

maptemplate ::app_quill::pkgFile {package} {
    set project     [project name]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE: 
    #    %package.tcl
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): Implementation File
    #
    #-------------------------------------------------------------------------

    #-------------------------------------------------------------------------
    # Exported Commands

    namespace eval ::%package {
        namespace export \\
            hello
    }

    #-------------------------------------------------------------------------
    # Commands

    # hello args
    #
    # Dummy procedure

    proc ::%package::hello {arglist} {
        puts "Hello, world!"
        puts "Args: <$arglist>"
    }
}

# mainFile package
#
# main.tcl file for the $package(n) package.

maptemplate ::app_quill::mainFile {package} {
    set project     [project name]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE: 
    #    main.tcl
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): main procedure
    #
    #-------------------------------------------------------------------------

    #-------------------------------------------------------------------------
    # Exported Commands

    namespace eval ::%package {
        namespace export \\
            main
    }

    #-------------------------------------------------------------------------
    # Commands

    # main argv
    #
    # Dummy procedure

    proc ::%package::main {argv} {
        puts "[quillinfo project] [quillinfo version]"
        puts ""
        puts "Args: <$argv>"
    }
}

# allTests package
#
# all_tests.test file for the $package(n) package.

maptemplate ::app_quill::allTests {package} {
    set project     [project name]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE:
    #    all_tests.test
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): Test Suite
    #-------------------------------------------------------------------------

    #-------------------------------------------------------------------------
    # Load the tcltest package

    if {[lsearch [namespace children] ::tcltest] == -1} {
        package require tcltest 2.3
        eval ::tcltest::configure $argv
    }

    ::tcltest::configure \
        -testdir [file dirname [file normalize [info script]]] \
        -notfile all_tests.test

    ::tcltest::runAllTests
}

# testFile package
#
# $package.test file for the $package(n) package.

maptemplate ::app_quill::testFile {package} {
    set project     [project name]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE:
    #    %package.test
    #
    # PROJECT:
    #    %project: %description
    #
    # DESCRIPTION:
    #    %package(n): Test Suite
    #-------------------------------------------------------------------------

    #-------------------------------------------------------------------------
    # Load the tcltest package

    if {[lsearch [namespace children] ::tcltest] == -1} {
        package require tcltest 2.3
        eval ::tcltest::configure $argv
    }

    namespace import ::tcltest::test

    #-------------------------------------------------------------------------
    # Load the package to be tested

    source ../../lib/%package/pkgModules.tcl
    namespace import ::%package::*

    #-------------------------------------------------------------------------
    # Setup

    # TBD

    #-------------------------------------------------------------------------
    # dummy

    test dummy-1.1 {dummy test} -body {
        set a false
    } -result {true}

    #-------------------------------------------------------------------------
    # Cleanup

    ::tcltest::cleanupTests
}
